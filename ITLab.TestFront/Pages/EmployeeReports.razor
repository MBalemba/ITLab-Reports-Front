@page "/reports/employee"
@using Microsoft.Extensions.Logging

@inject IJSRuntime js

@using System.Net.Http

@inject Microsoft.Extensions.Logging.ILogger<Index> logger
@inject NavigationManager navigationManager

<h1>Отчеты сотрудников</h1>


<p>Промежуток выборки отчетов</p>
<div class="form-row" style="margin:10px">
    <p>От</p>
    <div class="col">
        <input type="date" @bind-value="from" class="form-control">
    </div>
    <p>До</p>
    <div class="col">
        <input type="date" @bind-value="to" class="form-control">
    </div>
    <button class="btn btn-primary" @onclick="LoadInfo">Обновить</button>
</div>

@if (reportGroups.Count == 0)
{
    <p>Нет данных</p>
}

@foreach (var reportGroup in reportGroups)
{
    <div class="card border-dark mb-3">

        <div class="card-header row">
            <div class="col-6">@reportGroup.ReportSenderName</div>
            <div  class="text-right col-6">Сумма: @reportGroup.Reports.Select(r => r.Salary).Where(s => s.Status == Models.RenderModels.LazyValueStatus.Loaded).Select(s => s.Value.Count).Sum()</div>
        </div>

        <div class="card-body">

            @foreach (var report in reportGroup.Reports)
            {
                <div class="row" style="margin-bottom: 10px">
                    <div class="col-8">
                        <ReportComponent Report="report.Report" />
                    </div>
                    <div class="col-4">
                        @switch (report.Salary.Status)
                        {
                            case Models.RenderModels.LazyValueStatus.Loading:
                                <p>Загрузка оплаты...</p>
                                break;
                            case Models.RenderModels.LazyValueStatus.Error:
                                <p>Невозможно загрузить данные: @report.Salary.errorDescription</p>
                                break;
                            case Models.RenderModels.LazyValueStatus.NoData:
                                <div class="card">
                                    <div class="card-header">Оплата не назначена</div>

                                    @if (roles.Contains("salary.admin"))
                                    {
                                        <div class="card-body">
                                            <div class="input-group mb-3">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text">₽</span>
                                                </div>
                                                <input type="number" class="form-control" @bind-value="report.UpdateSalaryInfo.Count">
                                            </div>
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text">Комментарий</span>
                                                </div>
                                                <textarea class="form-control" @bind="report.UpdateSalaryInfo.Description"></textarea>
                                            </div>
                                            <button class="btn btn-outline-secondary" type="button" @onclick="async () => await UpdateSalaryInfo(report)">Назначить</button>
                                        </div>
                                    }
                                </div>
                                break;
                            case Models.RenderModels.LazyValueStatus.Loaded:
                                @if (roles.Contains("salary.admin"))
                                {
                                    <div class="card-body">
                                        <div class="input-group mb-3">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">₽</span>
                                            </div>
                                            <input type="number" class="form-control" @bind-value="report.UpdateSalaryInfo.Count">
                                        </div>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">Комментарий</span>
                                            </div>
                                            <textarea class="form-control" @bind="report.UpdateSalaryInfo.Description"></textarea>
                                        </div>
                                        <button class="btn btn-outline-warning" type="button" @onclick="async () => await UpdateSalaryInfo(report)">Обновить</button>
                                    </div>
                                }
                                else
                                {
                                    <div class="card">
                                        <div class="card-header">
                                            @report.Salary.Value.Count
                                        </div>
                                        <div class="card-body">
                                            @report.Salary.Value.Description
                                        </div>
                                    </div>
                                }
                                break;
                            default:
                                <p>Некорректное состояние</p>
                                break;
                        }
                    </div>
                </div>
            }
        </div>
    </div>


}
@code {

    string lol;

    List<ITLab.TestFront.Models.RenderModels.EployeeReportsGroup> reportGroups = new List<Models.RenderModels.EployeeReportsGroup>();

    DateTime from = DateTime.Now - TimeSpan.FromDays(30);
    DateTime to = DateTime.Now;

    [CascadingParameter]
    protected HttpClient httpClient { get; set; }
    [CascadingParameter]
    protected List<string> roles { get; set; }
    [CascadingParameter]
    ConnectionStrings connectionStrings { get; set; }
    [CascadingParameter]
    IReportsApi reportsApi { get; set; }
    [CascadingParameter]
    IUsersApi usersApi { get; set; }
    [CascadingParameter]
    ISalaryApi salaryApi { get; set; }


    JsonSerializerOptions jsonOptions = new JsonSerializerOptions
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender)
        {
            return;
        }

        await LoadInfo();
    }

    private async Task LoadInfo()
    {
        await LoadReports();
        await LoadSalary();

    }


    private async Task LoadReports()
    {
        var allReports = await reportsApi.GetAllReports();
        allReports = allReports.Where(r => r.Date >= from && r.Date <= to).ToList();
        reportGroups = allReports
            .GroupBy(r => r.Assignees.Implementer)
            .Select(g => new Models.RenderModels.EployeeReportsGroup
            {
                EmployeeId = g.Key,
                Reports = g.OrderByDescending(r => r.Date).Select(r => new ITLab.TestFront.Models.RenderModels.EployeeReportsGroup.ReportAndCompaceSalary { Report = r }).ToList()
            })
            .ToList();
    }
    private async Task LoadSalary()
    {
        var allUsers = await usersApi.GetUsersInfo();
        foreach (var group in reportGroups)
        {
            var targetUser = allUsers.FirstOrDefault(u => u.Id == group.EmployeeId);
            if (targetUser == default)
            {
                continue;
            }
            group.Employee = group.Employee.Loaded(targetUser);
        }
        StateHasChanged();
        foreach (var group in reportGroups)
        {
            try
            {
                var reportSalary = await salaryApi.GetUsersReportsSalary(group.EmployeeId);

                foreach (var report in group.Reports)
                {
                    var targetSalary = reportSalary.FirstOrDefault(rs => rs.ReportId == report.Report.Id);
                    if (targetSalary == default)
                    {
                        report.Salary = report.Salary.NoData();
                        continue;
                    }
                    report.Salary = report.Salary.Loaded(targetSalary);
                    report.UpdateSalaryInfo.Count = report.Salary.Value.Count;
                    report.UpdateSalaryInfo.Description = report.Salary.Value.Description;
                }
            }
            catch (Refit.ApiException apiEx) when (apiEx.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                foreach (var report in group.Reports)
                {
                    report.Salary = report.Salary.Error("Доступа к зарплате сотрудника запрещен");
                }
            }
            catch (Exception ex)
            {
                foreach (var report in group.Reports)
                {
                    report.Salary = report.Salary.Error(ex.Message);
                }
            }
            StateHasChanged();
        }
        StateHasChanged();
    }


    private async Task UpdateSalaryInfo(ITLab.TestFront.Models.RenderModels.EployeeReportsGroup.ReportAndCompaceSalary report)
    {
        report.Salary = report.Salary.Loading();
        StateHasChanged();
        try
        {
            var resultSalary = await salaryApi.UpdateUsersReportsSalary(report.Report.Id, report.UpdateSalaryInfo);
            report.Salary = report.Salary.Loaded(resultSalary);
        }
        catch (Exception ex)
        {
            report.Salary = report.Salary.Error(ex.Message);
        }
        StateHasChanged();
    }
}
