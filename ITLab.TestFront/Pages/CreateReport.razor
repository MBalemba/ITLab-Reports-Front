@page "/report/create"
@implements IDisposable

@using Microsoft.Extensions.Logging
@using Blazor.FileReader
@inject IJSRuntime js
@inject IUsersApi usersApi
@inject Blazor.FileReader.IFileReaderService fileReaderService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Markdig.MarkdownPipeline markdownPipeline

@using System.Net.Http

@inject Microsoft.Extensions.Logging.ILogger<Index> logger
@inject NavigationManager navigationManager

<style>
    .@dropTargetClass {
        display: block;
        padding: 20px;
        margin-bottom: 10px;
        border: 1px dashed black;
        border-radius: 5px;
        position: relative;
    }
    .@dropTargetDragClass {
        border-color: orangered;
        font-weight: bold;
    }
    input.clickable {
        position: absolute;
        width: 100%;
        height: 100%;
        opacity: 0;
        margin-top: -20px;
        margin-left: -20px;
        cursor: pointer;
    }
</style>

<h1>Написание отчета</h1>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}

@if (availableUsers.Count == 0)
{
    <p>Загрузка списка пользователей</p>
}
else
{


    <div class="row">
        <div class="col-6">
            <EditForm class="form-group" Model="createReportRequest" OnValidSubmit="SendCreateReportRequest">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <p>Опишите, что вы делали за последнее время, что вы считаете важным при оценке вашей работы</p>
                    <p>Вы можете прикрепить изображения или документы. Формат описания поддерживает <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">формат Markdown</a></p>
                    @switch (currentFileStatus)
                    {
                        case FileAddingStatus.WaitForFile:

                            <div>
                                <input type="file" @ref=dropTargetInput />
                                <button type="button" @onclick="OnLoadDocument">Добавить документ/изображение</button>
                            </div>
                            break;
                        case FileAddingStatus.Uploading:
                            <p>Uploading @currentFileName</p>
                            break;
                        default:
                            <p>incorrect state</p>
                            break;
                    }
                    <label>
                        Про кого пишется отчет
                        <InputSelect class="form-control" @bind-Value="implementerUserId">
                            @foreach (var user in availableUsers)
                                {
                                <option value="@user.Id.ToString()">@user.ShortName</option>
                                }
                        </InputSelect>
                    </label>
                    <p>Отчет на языке markdown:</p>
                    <InputTextArea class="form-control" id="exampleFormControlTextarea1" rows="15" Value="@createReportRequest.Text" ValueExpression="() => createReportRequest.Text" ValueChanged="SaveText" />
                </div>
                <button type="submit" class="btn btn-primary mb-2">Отправить</button>
            </EditForm>
        </div>
        <div class="col-6">
            <p>Preview</p>
            <button @onclick="Update">Обновить</button>
            <div style="border: dotted">
                @((MarkupString)Markdig.Markdown.ToHtml(createReportRequest.Text ?? "", markdownPipeline))
            </div>
        </div>
    </div>
}

@code {

    enum FileAddingStatus
    {
        WaitForFile,
        Uploading
    }

    FileAddingStatus currentFileStatus;

    ElementReference dropTargetInput;

    const string dropTargetDragClass = "droptarget-drag";

    const string dropTargetClass = "droptarget";

    private List<UserModel> availableUsers = new List<UserModel>();
    private string implementerUserId;

    private List<string> _ipdropClasses = new List<string>() { dropTargetClass };

    string IpDropClass => string.Join(" ", _ipdropClasses);

    string currentFileName;
    private async Task SaveText(string text)
    {
        createReportRequest.Text = text;
        await localStorage.SetItemAsync("create_report.text", text);
    }

    public void OnIpDragLeave(EventArgs e)
    {
        _ipdropClasses.Remove(dropTargetDragClass);
    }
    public void OnIpDragEnter(EventArgs e)
    {
        _ipdropClasses.Add(dropTargetDragClass);
    }

    string error;

    CreateReportRequest createReportRequest = new CreateReportRequest();
    [CascadingParameter]
    HttpClient httpClient { get; set; }

    [CascadingParameter]
    ConnectionStrings connectionStrings { get; set; }

    [CascadingParameter]
    IReportsApi reportsApi { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender)
        {
            return;
        }
        createReportRequest.Text = await localStorage.GetItemAsync<string>("create_report.text") ?? "";
        await js.InvokeVoidAsync("startSavingReportText");
        implementerUserId = connectionStrings.UserId.ToString();
        var users = await usersApi.GetUsersInfo();
        availableUsers = users.OrderBy(u => u.LastName).ThenBy(u => u.FirstName).ToList();
        StateHasChanged();
    }

    private async Task SendCreateReportRequest()
    {
        try
        {
            await reportsApi.CreateReport(createReportRequest, Guid.Parse(implementerUserId));
            await js.InvokeVoidAsync("stopSavingReportText");
            await localStorage.RemoveItemAsync("create_report.text");
            navigationManager.NavigateTo(CalcHref("/test/"));
        }
        catch (Exception ex)
        {
            error = $"Попробуйте вернуться на основной сайт и отправить отчет снова | {ex.Message}";
        }
    }

    public async Task OnLoadDocument(EventArgs e)
    {
        this.StateHasChanged();
        var reference = fileReaderService.CreateReference(dropTargetInput);
        var files = (await reference.EnumerateFilesAsync()).ToList();
        Console.WriteLine(files.Count);
        if (files.Count != 1)
        {
            logger.LogInformation(files.Count.ToString());
            await js.InvokeVoidAsync("alert", "должен быть 1 файл");
            return;
        }
        var fileInfo = await files[0].ReadFileInfoAsync();

        var maxSize = 30 * 1024 * 1024;
        if (fileInfo.Size >= maxSize)
        {
            await js.InvokeVoidAsync("alert", "Размер не должен превышать 30 мегабайт");
            return;
        }
        currentFileStatus = FileAddingStatus.Uploading;
        currentFileName = fileInfo.Name;
        await UploadFile(reference);
        currentFileStatus = FileAddingStatus.WaitForFile;
        currentFileName = "";
        StateHasChanged();
    }

    private async Task UploadFile(IFileReaderRef fileRef)
    {
        foreach (var file in await fileRef.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            logger.LogInformation(fileInfo.Size.ToString());
            MultipartFormDataContent form = new MultipartFormDataContent();
            using var fileStream = await file.OpenReadAsync();
            var array = new byte[fileInfo.Size];
            Console.WriteLine($"array {array.Length}");
            var readed = await fileStream.ReadAsync(array, 0, array.Length);
            form.Add(new ByteArrayContent(array, 0, array.Length), "uploadingForm", fileInfo.Name);

            var uri = connectionStrings.UploadFile;
            Console.WriteLine(uri);

            HttpResponseMessage response = await httpClient.PostAsync(uri, form);
            response.EnsureSuccessStatusCode();
            var content = await response.Content.ReadAsStringAsync();
            var loadedFileInfo = JsonSerializer.Deserialize<FileObjectModel>(content, new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            });

            if (fileInfo.Name.EndsWith("jpg", StringComparison.OrdinalIgnoreCase) ||
                fileInfo.Name.EndsWith("png", StringComparison.OrdinalIgnoreCase) ||
                fileInfo.Name.EndsWith("gif", StringComparison.OrdinalIgnoreCase))
            {
                createReportRequest.Text += $"\n![ОПИСАНИЕ {fileInfo.Name}]({connectionStrings.DownloadFile(loadedFileInfo.Id)})\n";
            }
            else
            {
                createReportRequest.Text += $"\n[ОПИСАНИЕ {fileInfo.Name}]({connectionStrings.DownloadFile(loadedFileInfo.Id)})\n";

            }

            StateHasChanged();
        }
        logger.LogInformation("end files");
    }

    private void Update()
    {
        StateHasChanged();
    }

    private string CalcHref(string baseHref)
    {
        var uri = new Uri(navigationManager.Uri);

        var queryString = baseHref + uri.Query;
        return queryString;
    }
    void IDisposable.Dispose()
    {
        js.InvokeVoidAsync("stopSavingReportText");
    }

}
