@page "/reports/my"
@page "/"
@using Microsoft.Extensions.Logging

@inject IJSRuntime js

@using System.Net.Http

@inject Microsoft.Extensions.Logging.ILogger<Index> logger
@inject NavigationManager navigationManager

<h1>@(currentMode == "about_me" ? "Отчеты обо мне" : "Написанные мной отчеты") </h1>
<button class="btn btn-primary" @onclick="ChangeMode">Переключить</button>
@foreach (var report in reports.Where(Selection(currentMode)))
{
    <div class="row" style="margin-bottom:5px">
        <div class="col-9">
            <ReportComponent Report="report.ReportInfo" RenderReporter="@(currentMode == "about_me")" RenderImplementer="@(currentMode != "about_me")">

                <button class="btn btn-danger" @onclick="@(async () => await Delete(report.ReportInfo.Id))">Удалить</button>
            </ReportComponent>
        </div>
        <div class="col-3">
            @switch (report.SalaryInfo.Status)
            {
                case Models.RenderModels.LazyValueStatus.Loading:
                    <p>Загрузка оплаты...</p>
                    break;
                case Models.RenderModels.LazyValueStatus.Error:
                    <p>Невозможно загрузить данные</p>
                    break;
                case Models.RenderModels.LazyValueStatus.NoData:
                    if (currentMode == "about_me")
                    {
                        <p>Оплата не назначена</p>
                    }
                    else
                    {
                        <p>Нет доступа к информации о оплате</p>
                    }
                    break;
                case Models.RenderModels.LazyValueStatus.Loaded:
                    <div class="card">
                        <div class="card-header">@report.SalaryInfo.Value.PrettyDate: @report.SalaryInfo.Value.Count ₽</div>
                        <div class="card-body">@report.SalaryInfo.Value.Description</div>
                        <div class="card-footer">Назначил: @report.SalaryApproverName.Value</div>
                    </div>
                    break;
                default:
                    <h1>некорректное состояние</h1>
                    break;
            }
        </div>
    </div>
}
@code {

    private string currentMode = "about_me";

    List<ITLab.TestFront.Models.RenderModels.MyReportCompactView> reports = new List<Models.RenderModels.MyReportCompactView>();

    [CascadingParameter]
    protected HttpClient httpClient { get; set; }
    [CascadingParameter]
    protected List<string> roles { get; set; }
    [CascadingParameter]
    ConnectionStrings connectionStrings { get; set; }
    [CascadingParameter]
    IReportsApi reportsApi { get; set; }
    [CascadingParameter]
    ISalaryApi salaryApi { get; set; }
    [CascadingParameter]
    IUsersApi usersApi { get; set; }

    JsonSerializerOptions jsonOptions = new JsonSerializerOptions
    {
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
    };

    private void ChangeMode()
    {
        if (currentMode == "about_me")
        {
            currentMode = "from_me_about_others";
        }
        else
        {
            currentMode = "about_me";
        }
    }

    private Func<ITLab.TestFront.Models.RenderModels.MyReportCompactView, bool> Selection(string mode)
    {
        switch (mode)
        {
            case "about_me":
                return (r) => r.ReportInfo.Assignees.Implementer == connectionStrings.UserId;
            case "from_me_about_others":
                return (r) => r.ReportInfo.Assignees.Reporter == connectionStrings.UserId && r.ReportInfo.Assignees.Implementer != connectionStrings.UserId;
            default:
                return ((r) => true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        try
        {

            var salaryInfo = await salaryApi.GetUsersReportsSalary(connectionStrings.UserId);

            foreach (var item in reports)
            {
                var targetSalaryInfo = salaryInfo.FirstOrDefault(si => si.ReportId == item.ReportInfo.Id);
                if (targetSalaryInfo == null)
                {
                    item.SalaryInfo = item.SalaryInfo.NoData();
                    continue;
                }
                item.SalaryInfo = item.SalaryInfo.Loaded(targetSalaryInfo);

                var user = await usersApi.GetUserInfo(targetSalaryInfo.ApproverId);
                item.SalaryApproverName = item.SalaryApproverName.Loaded($"{user.LastName} {user.FirstName[0]}. {user.MiddleName?[0] ?? '.'}.");
            }
        }
        catch (Exception)
        {
            reports.ForEach(r =>
            {
                r.SalaryInfo = r.SalaryInfo.Error();
            });
        }

        StateHasChanged();

    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var list = await reportsApi.GetReportsForUser(connectionStrings.UserId,
            DateTime.MinValue.ToString("dd.MM.yyyy"),
            DateTime.MaxValue.ToString("dd.MM.yyyy"));


        list.Reverse();

        reports = list.Select(ri => new Models.RenderModels.MyReportCompactView
        {
            ReportInfo = ri
        }).ToList();
    }

    private async Task Delete(string id)
    {
        await reportsApi.DeleteReport(id);
        await OnInitializedAsync();
    }
}
