@using Microsoft.Extensions.Logging
 
@inject ITLab.TestFront.Services.UserInfoPool userInfoPool
@inject Microsoft.Extensions.Logging.ILogger<UserNameComponent> logger
@Content

@code {
    [Parameter]
    public Guid UserId { get; set; }

    public string Content => UserModel.Status switch
    {
        Models.RenderModels.LazyValueStatus.Loading => "Загрузка ФИО...",
        Models.RenderModels.LazyValueStatus.Error => "Ошибка загрузки ФИО",
        Models.RenderModels.LazyValueStatus.NoData => "Данных нет",
        Models.RenderModels.LazyValueStatus.Loaded => UserModel.Value.ShortName,
        _ => "Критическая ошибка"
    };

    private ITLab.TestFront.Models.RenderModels.LazyValue<UserModel> UserModel;

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        try
        {
            var userInfo = await userInfoPool.GetUserInfo(UserId);
            UserModel = UserModel.Loaded(userInfo);
        }
        catch (Exception ex)
        {
            logger.LogWarning(ex, $"Can't get user info for {UserId}");
            UserModel = UserModel.Error(ex.Message);
        }
    }
}
